var express = require("express");
var router = express.Router();
var bodyParser = require('body-parser');
var jwt = require('jsonwebtoken');
var expressJwt = require('express-jwt');
var params = require('express-params');
var passport = require('passport');
var Auth0Strategy = require('passport-auth0');
var config = require('config');
var request = require('request');

module.exports = function(app) {

	app.use(passport.initialize());
	app.use(bodyParser.json());
	params.extend(app);

	var auth0Domain =  config.get('auth0.Domain');
	var auth0Client = config.get('auth0.Client');
	var auth0Secret = config.get('auth0.Secret');
	var authDisabled = config.get('authDisabled').toLowerCase() === 'true';

	var userAPI = config.get('userAPI');

	var strategy = new Auth0Strategy({
	    domain:       auth0Domain,
	    clientID:     auth0Client,
	    clientSecret: auth0Secret,
	    callbackURL:  '/_auth_/callback'
	  }, function(accessToken, refreshToken, extraParams, profile, done) {
	    // accessToken is the token to call Auth0 API (not needed in the most cases)
	    // extraParams.id_token has the JSON Web Token
	    // profile has all the information from the user
	    return done(null, profile, extraParams);
	});

	passport.use(strategy);

	var jwtCheck = expressJwt({ secret: new Buffer(auth0Secret, 'base64') });

	function doJWTCheck(req, res, next) {
		console.log('authDisabled in doJWTCheck:', authDisabled)
		if (authDisabled) {
			next();
		}
		else {
			jwtCheck(req, res, next);
		}
	}

  function userCheck(req, res, next) {
  	console.log('userCheck:', authDisabled)
  	if (authDisabled) {
  		mockUserCheck(req, res, next);
  	} else {
			realUserCheck(req, res, next);
  	}
  }

  function mockUserCheck(req, res, next) {
    var tcUser = {
    	id: parseInt(req.headers['x-uid']),
    	name: req.headers['x-name'],
    	handle: req.headers['x-handle'],
    	picture: req.headers['x-picture']
    };
    req.tcUser = tcUser;

  	next();
  }

	function realUserCheck(req, res, next) {
		if (!req.user || !req.user.sub) {
			console.log('LC: Unauthorized - no user', req.user);
			res.status(401).send('LC: Unauthorized - no user')
		}
		else {
			var options = {
				url: userAPI + '/user',
			  headers: {
					'Authorization': req.get('Authorization')
			  }
			};
			request(options, function (error, response, body) {
				//TODO(DG: 11/20/2014): improve/cleanup error handling
			  if (!error && response.statusCode == 200) {
			    body = JSON.parse(body);
					if (!body.perms || !body.perms.challengeApp) {
						res.status(401).send('LC: Unauthorized')
					}
					else {
				    var tcUser = {
				    	id: body.id,
				    	name: body.fullName || req.user.name,
				    	handle: body.handle,
				    	picture: body.avatarUrl || req.user.picture
				    };
				    req.tcUser = tcUser;
						next();
					}
			  }
			  else {
			  	res.status(503).send('LC User Service API Unavailable')
			  }
			})
		}
	}

	//Proxy to User Service
	router.route('/_api_/user')
		.all(doJWTCheck)
		.all(userCheck)
		.get(function(req, res) {
			res.send(req.tcUser);
		});

	router.route('/_api_/config')
		.get(function(req, res) {
	    var tcWWW = config.get('tcWWW');

	    var data = {
	    	'auth0Domain': auth0Domain,
	    	'auth0ClientId': auth0Client,
        'baseUrl': tcWWW,
        'baseChallengeDetailsUrl': tcWWW + '/challenge-details/',
        'baseMemberProfileUrl': tcWWW + '/member-profile/',
        'tcBaseProjectUrl': config.get('tcProjectBase')
	      }
	    res.json(data);

		});


  app.use(router);
  //TODO: enable this if we want generic error handling
	// app.use(function (err, req, res, next) {
	//   if (err.name === 'UnauthorizedError') {
	//     res.status(401).send('invalid token...');
	//   }
	//   next(err);
	// });

	app.get('/_auth_/callback', function(req, res, next) {

	  passport.authenticate('auth0', function(err, user, info) {
	    if (err) return next(err);
	    if (!user) {
	    	return res.redirect('/login');
	    }
	    else {
	    	//console.log('user back from auth', user)
		    req.logIn(user, function(err) {
		    	//console.log('user back from auth 2', user)
		    //   if (err) { return next(err); }
		      // return res.redirect('/users/' + user.username);
		    });
		    //console.log('info: ', info.id_token);
		    //AJAX call for user; https://qa.topcoder.com/v2/user/tcid/
	      return res.redirect('/#/_auth_/login?jwt=' + info.id_token + '&state=' + req.query.state);
	    }
	  })(req, res, next);
	});

	app.get('/_auth_/handleAuthError', function(req, res) {
		console.log('There was an error in authorizing the user');
	})

	return jwtCheck;
}
