var express = require("express");
var router = express.Router();
var bodyParser = require('body-parser');
var jwt = require('jsonwebtoken');
var expressJwt = require('express-jwt');
var params = require('express-params');
var passport = require('passport');
var Auth0Strategy = require('passport-auth0');
var config = require('config');


var challengeApi = require('request-json');
var challengeServiceClient = challengeApi.newClient(config.get('challengeServiceURI'));

module.exports = function(app) {

	app.use(passport.initialize());
	app.use(bodyParser.json());
	params.extend(app);

	var auth0Domain =  config.get('auth0.Domain');
	var auth0Client = config.get('auth0.Client');
	var auth0Secret = config.get('auth0.Secret');

	//throw error if auth domain/client/secret is not set
	if (!auth0Domain) throw new Error('Auth0 Domain not configured. Set `TC_AUTH0_DOMAIN` as an environment variable.');
	if (!auth0Client) throw new Error('Auth0 Client not configured. Set `TC_AUTH0_CLIENT` as an environment variable.');
	if (!auth0Secret) throw new Error('Auth0 Secret not configured. Set `TC_AUTH0_SECRET` as an environment variable.');

	var strategy = new Auth0Strategy({
	    domain:       auth0Domain,
	    clientID:     auth0Client,
	    clientSecret: auth0Secret,
	    callbackURL:  '/_auth_/callback'
	  }, function(accessToken, refreshToken, extraParams, profile, done) {
	    // accessToken is the token to call Auth0 API (not needed in the most cases)
	    // extraParams.id_token has the JSON Web Token
	    // profile has all the information from the user
	    return done(null, profile, extraParams);
	});

	passport.use(strategy);

	var jwtCheck = expressJwt({
	  	secret: new Buffer(auth0Secret, 'base64')
	});

	//TODO: cleanup routes
	//common routes
	// router.route('/_api_/*')
	// 	//authenticate all API requests
 //  	.all(jwtCheck)
 //  	.get(function(req, res) {
 //  		var apiUri = '/' + req.params[0]
 //  		console.log('apiURI', apiUri);
	//     challengeServiceClient.get(apiUri, function(err, apiRes, body) {
	//     	//TODO: proper error handling
	//       console.log('err:', err);
	//       console.log('body:', body);
	//       if (body.success) {
	//       	res.send(body);
	//       } else {
	//       	res.status(body.result.status).send({error: body.content})
	//       }
	//     })
 //  	})
 //  	.post(function(req, res) {
 //  		console.log('method: ' + req.method)
 //  		var apiUri = '/' + req.params[0]
 //  		var body = req.body;
 //  		console.log('apiURI', apiUri);
 //  		console.log('body', body);

	//     challengeServiceClient.post(apiUri, body, function(err, apiRes, body) {
	//     	//TODO: proper error handling
	//       console.log('err:', err);
	//       console.log('body:', body);
	//       if (!err && body.result.success) {
	//       	res.send(body);
	//       } else {
	//       	res.status(body.result.status).send({error: body.content})
	//       }
	//     })
 //  	})
 //  	.put(function(req, res) {
 //  		console.log('method: ' + req.method)
 //  		var apiUri = '/' + req.params[0]
 //  		var body = req.body;
 //  		console.log('apiURI', apiUri);
 //  		console.log('body', body);

	//     challengeServiceClient.put(apiUri, body, function(err, apiRes, body) {
	//     	//TODO: proper error handling
	//       console.log('err:', err);
	//       console.log('body:', body);
	//       if (!err && body.result.success) {
	//       	res.send(body);
	//       } else {
	//       	res.status(body.result.status).send({error: body.content})
	//       }
	//     })
 //  	})

 //  app.use(router);

	app.get('/_auth_/callback', function(req, res, next) {
		// console.log('here123...', req.query);
	  passport.authenticate('auth0', function(err, user, info) {
	  	//console.log('here456...', user)
	    if (err) return next(err);
	    if (!user) {
	    	return res.redirect('/login');
	    } else {
	      // console.log('DID IT1!')
		    req.logIn(user, function(err) {
		    	// console.log('logged in user!')
		    	// console.log("error?", err)
		    	// console.log('user', user)
		    //   if (err) { return next(err); }
		      // return res.redirect('/users/' + user.username);
		    });
	      return res.redirect('/#/_auth_/login?jwt=' + info.id_token + '&state=' + req.query.state);
	    }
	  })(req, res, next);
	});

	app.get('/_auth_/handleAuthError', function(req, res) {
		console.log('have auth error');
	})

	//app.param('type', /(.+)/);
// app.param('type', /^\d+$/);

	// app.get('/_api_/(:typeX*)', function(req, res) {
	// 	//var type =  req.params('type');
	// 	//console.log('type: ', req.params)
	// 	console.log('==>', req.params['0'])
	// 	console.log('==>', req.params.typeX)
	// 	console.log('Authorization==>', req.header('Authorization'));
	// 	//TODO: robust string handling... if error exception is thrown
	// var profile = jwt.decode(req.header('Authorization').substring('Bearer '.length));
	// //console.log("profile=>", profile);

	//   // res.send('got abc from foo...');
	//   res.json({
	//     challenges: [{id: 11, name: 'challenge 11'}, {id: 12, name: 'challenge 12'}]
	//   });

	// });

	// app.get('/_api_/challenges', function(req, res) {
	//   console.log('returing challenges...')
	//   res.json({
	//     challenges: [{id: 11, name: 'challenge 11'}, {id: 12, name: 'challenge 12'}]
	//   });
	// });

// app.get('/_api_/test', function(req, res, next) {
//     console.log('in web.js app.get call2')
//     res.send('hi')
//     // passport.authenticate('auth0', function(err, user, info) {
//     //   console.log('got an authenticated api request. w00t');
//     //   console.log('err...', err)
//     //   console.log('info...', info)
//     //   console.log('user...', user)
//     //   if (err) return next(err);
//     //   if (!user) {
//     //     return res.redirect('/login');
//     //   } else {
//     //     console.log('DID IT1!')
//     //     req.logIn(user, function(err) {
//     //       console.log('logged in user!', err)
//     //     //   if (err) { return next(err); }
//     //       // return res.redirect('/users/' + user.username);
//     //     });
//     //     return res.redirect('/#/_auth_?jwt=' + info.id_token + '&state=' + req.query.state);
//     //   }
//     // });

//   });


	return jwtCheck;
}
