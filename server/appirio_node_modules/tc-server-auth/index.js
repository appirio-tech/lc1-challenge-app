var express = require("express");
var router = express.Router();
var bodyParser = require('body-parser');
var jwt = require('jsonwebtoken');
var expressJwt = require('express-jwt');
var params = require('express-params');
var passport = require('passport');
var Auth0Strategy = require('passport-auth0');
var config = require('config');

var challengeApi = require('request-json');
var challengeServiceClient = challengeApi.newClient(config.get('challengeServiceURI'));

module.exports = function(app) {

	app.use(passport.initialize());
	app.use(bodyParser.json());
	params.extend(app);

	var auth0Domain =  config.get('auth0.Domain');
	var auth0Client = config.get('auth0.Client');
	var auth0Secret = config.get('auth0.Secret');

	//throw error if auth domain/client/secret is not set
	if (!auth0Domain) throw new Error('Auth0 Domain not configured. Set `TC_AUTH0_DOMAIN` as an environment variable.');
	if (!auth0Client) throw new Error('Auth0 Client not configured. Set `TC_AUTH0_CLIENT` as an environment variable.');
	if (!auth0Secret) throw new Error('Auth0 Secret not configured. Set `TC_AUTH0_SECRET` as an environment variable.');

	var strategy = new Auth0Strategy({
	    domain:       auth0Domain,
	    clientID:     auth0Client,
	    clientSecret: auth0Secret,
	    callbackURL:  '/_auth_/callback'
	  }, function(accessToken, refreshToken, extraParams, profile, done) {
	    // accessToken is the token to call Auth0 API (not needed in the most cases)
	    // extraParams.id_token has the JSON Web Token
	    // profile has all the information from the user
	    return done(null, profile, extraParams);
	});

	passport.use(strategy);

	var jwtCheck = expressJwt({ secret: new Buffer(auth0Secret, 'base64') });

	//TODO: cleanup routes
	//common routes
	//Use /v2/user/identity to get tc userid, handle, and email
	//http://docs.tcapi.apiary.io/#userprofile
	router.route('/_api_/user')
		//.all(jwtCheck)
		.get(function(req, res) {
			req.user.handle = req.user.nickname; //create 'handle' alias for nickname
			res.send(req.user);
		})
	router.route('/_api_/*')
  	//.all(jwtCheck)
  	.get(function(req, res) {
  		var apiUri = '/' + req.params[0];

	    challengeServiceClient.get(apiUri, function(err, apiRes, body) {
	    	//TODO: proper error handling
	      if (body.success) {
	      	res.send(body);
	      } else {
	      	res.status(body.result.status).send({error: body.content})
	      }
	    })
  	})

  	.post(function(req, res) {
	// var profile = jwt.decode(req.header('Authorization').substring('Bearer '.length));
	// //console.log("profile=>", profile);
  		var apiUri = '/' + req.params[0]
  		var body = req.body;

	    challengeServiceClient.post(apiUri, body, function(err, apiRes, body) {
	    	//TODO: proper error handling
	      if (!err && body.result.success) {
	      	res.send(body);
	      } else {
	      	res.status(body.result.status).send({error: body.content})
	      }
	    })
  	})
  	.put(function(req, res) {
  		var apiUri = '/' + req.params[0]
  		var body = req.body;

	    challengeServiceClient.put(apiUri, body, function(err, apiRes, body) {
	    	//TODO: proper error handling
	      if (!err && body.result.success) {
	      	res.send(body);
	      } else {
	      	res.status(body.result.status).send({error: body.content})
	      }
	    })
  	})

  	.delete(function(req, res) {
  		var apiUri = '/' + req.params[0];

	    challengeServiceClient.del(apiUri, function(err, apiRes, body) {
	    	//TODO: proper error handling
	      if (body.success) {
	      	res.send(body);
	      } else {
	      	res.status(body.result.status).send({error: body.content})
	      }
	    })
  	})

  app.use(router);
	// app.use(function (err, req, res, next) {
	//   if (err.name === 'UnauthorizedError') {
	//     res.send(401, 'invalid token...');
	//   }
	// });

	app.get('/_auth_/callback', function(req, res, next) {
	  passport.authenticate('auth0', function(err, user, info) {
	    if (err) return next(err);
	    if (!user) {
	    	return res.redirect('/login');
	    } else {
		    req.logIn(user, function(err) {
		    //   if (err) { return next(err); }
		      // return res.redirect('/users/' + user.username);
		    });
	      return res.redirect('/#/_auth_/login?jwt=' + info.id_token + '&state=' + req.query.state);
	    }
	  })(req, res, next);
	});

	app.get('/_auth_/handleAuthError', function(req, res) {
		console.log('have auth error');
	})

	// temporal fix
	var auth0Client = process.env.TC_AUTH0_CLIENT || 'foo';
	var auth0Secret = process.env.TC_AUTH0_SECRET || 'bar';
	var jwtCheck = expressJwt({
		secret: new Buffer(auth0Secret, 'base64')
	});

	return jwtCheck;
}
