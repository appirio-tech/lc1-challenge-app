var express = require("express");
var router = express.Router();
var bodyParser = require('body-parser');
var jwt = require('jsonwebtoken');
var expressJwt = require('express-jwt');
var params = require('express-params');
var passport = require('passport');
var Auth0Strategy = require('passport-auth0');
var config = require('config');
var request = require('request');

module.exports = function(app) {

	app.use(passport.initialize());
	app.use(bodyParser.json());
	params.extend(app);

	var auth0Domain =  config.get('auth0.Domain');
	var auth0Client = config.get('auth0.Client');
	var auth0Secret = config.get('auth0.Secret');
	var authEnabled = config.get('authEnabled').toLowerCase() === 'true';

	var userAPI = config.get('userAPI');

	var strategy = new Auth0Strategy({
	    domain:       auth0Domain,
	    clientID:     auth0Client,
	    clientSecret: auth0Secret,
	    callbackURL:  '/_auth_/callback'
	  }, function(accessToken, refreshToken, extraParams, profile, done) {
	    // accessToken is the token to call Auth0 API (not needed in the most cases)
	    // extraParams.id_token has the JSON Web Token
	    // profile has all the information from the user
	    return done(null, profile, extraParams);
	});

	passport.use(strategy);

	var jwtCheck = expressJwt({ secret: new Buffer(auth0Secret, 'base64') });

	function doJWTCheck(req, res, next) {
		//console.log('authEnabled in doJWTCheck:', authEnabled)
		if (authEnabled) {
			jwtCheck(req, res, next);
		}
		else {
			next();
		}
	}

  function userCheck(req, res, next) {
  	if (authEnabled) {
  		realUserCheck(req, res, next);
  	} else {
			mockUserCheck(req, res, next);
  	}
  }

  function mockUserCheck(req, res, next) {
    var tcUser = {
    	id: parseInt(req.headers['x-uid']),
    	name: req.headers['x-name'],
    	handle: req.headers['x-handle'],
    	picture: req.headers['x-picture'],
    	perms: {
    		challengeApp: true
    	}
    };
    req.tcUser = tcUser;

  	next();
  }

	function realUserCheck(req, res, next) {
		if (!req.user || !req.user.sub) {
			console.log('LC: Unauthorized - no user', req.user);
			res.status(401).send('LC: Unauthorized - no user')
		}
		else {
			//console.log('user api', userAPI)
			var options = {
				url: userAPI + '/user',
			  headers: {
					'Authorization': req.get('Authorization')
			  }
			};
			request(options, function (error, response, body) {
				//TODO(DG: 11/20/2014): improve/cleanup error handling
			  if (!error && response.statusCode == 200) {
			    body = JSON.parse(body);
			    //console.log("back from user: ", body)
					if (!body.perms || !body.perms.challengeApp) {
						res.status(401).send('LC: Unauthorized')
					}
					else {
				    var tcUser = {
				    	id: body.id,
				    	name: body.fullName || req.user.name,
				    	handle: body.handle,
				    	picture: body.avatarUrl || req.user.picture,
				    	perms: body.perms
				    };
				    req.tcUser = tcUser;
						next();
					}
			  }
			  else {
			  	res.status(503).send('LC User Service API Unavailable')
			  }
			})
		}
	}

	//Proxy to User Service
	router.route('/_api_/user')
		.all(doJWTCheck)
		.all(userCheck)
		.get(function(req, res) {
			if (!req.tcUser || !req.tcUser.perms || !req.tcUser.perms.challengeApp) {
				res.status(401).send('LC: Unauthorized');
			} else {
				res.send(req.tcUser);
			}

		});

	router.route('/_api_/config')
		.get(function(req, res) {
	    var tcWWW = config.get('tcWWW');

	    var data = {
	    	'auth0Domain': auth0Domain,
	    	'auth0ClientId': auth0Client,
        'baseUrl': tcWWW,
        'baseChallengeDetailsUrl': tcWWW + '/challenge-details/',
        'baseMemberProfileUrl': tcWWW + '/member-profile/',
        'tcBaseProjectUrl': config.get('tcProjectBase')
	      }
	    res.json(data);

		});


  app.use(router);

  var Challenge = require('../../challenge-consumer').Challenge;
  var challengeClient = new Challenge(config.challenge.apiUrl);

  function handleFileError(err) {
    if (err) {
      console.log(err);
      console.log("Unable to serve file");
    }
  }

  var scorecardRouter = express.Router();
  scorecardRouter.route('/_auth_/checkAuth/challenges/:challengeId/scorecards/:scorecardId')
    .all(doJWTCheck)
    .all(userCheck)
    .get(function (req, res) {
    	//allow if -
    	//- user has challengeApp perm
    	//- user is creator of challenge
    	//- user is submitter of submission
    	console.log('user perms', req.tcUser.perms)

    	var canView = req.tcUser.perms.challengeApp;

    	console.log('canView: ', canView);

    	if (canView) {
    		res.status(200).json({msg: 'User has challengeApp perm'});
    		return;
    	// } else {
    	// 	console.log('User does not have challengeApp perms. continue checking')
    	}

      //console.log('in scorecardRouter', req.headers.authorization)
      var parameters = {
      	headers: {
      		authorization: req.headers.authorization,
      	},
    		challengeId: req.params.challengeId,
    		scorecardId: req.params.scorecardId,
    		fields: 'createdBy,submissions'
      };
      //console.log('parameters, ', parameters)

      challengeClient.getChallengesByChallengeIdScorecardsByScorecardId(parameters)
      	.then(function(result) {
      		//Logic on whether or not to show to user
      		//Only doing simple case right now: show if logged in userId == submitter id (scorecard.createdBy)
      		//or if challenge status is 'complete' and the logged in user is a participant
      		//check if is challenge is 'complete'

	      	//console.log('back', result.body);
	      	//console.log('req.tcUser', req.tcUser)

	      	//console.log('result.body.content.createdBy', result.body.content.createdBy);

      		// if (result.body.content.createdBy === req.tcUser.id) {
      		// 	res.status(200).json({msg: 'User is creator of related scorecard'});
      		// }
      		if (result.body.content.submission.submitterId === req.tcUser.id) {
      			res.status(200).json({msg: 'User is submitter of related scorecard'});
      		}
      		else {
      			res.status(401).send('Unauthorized to view this scorecard');
      		}

	      })
				.catch(function (error) {
				    // Handle any error from all above steps
				    console.error('SCORECARD ERROR: ', error);
				    res.status(401).send('Unknown error. Unauthorized to view this scorecard');
				});
		});

    app.use(scorecardRouter);

	  app.get('/scorecard/challenges/:challengeId/scorecards/:scorecardId', function (req, res) {
	  	///challenges/:challengeId/scorecard/:scorecardId
	    res.redirect('/scorecard/#/challenges/' + req.params.challengeId + '/scorecard/' + req.params.scorecardId);
	  });

	  app.get('/scorecard', function (req, res) {
		  var fileOptions = {
		    root: __dirname + '/../../../client/scorecard'
		  };
	    res.sendFile('scorecard.html', fileOptions, handleFileError);
	  });

	  app.use('/public', express.static(__dirname + '/../../../client'));
	  // console.log('public dir:', (__dirname + '/../../../client'))

  //TODO: enable this if we want generic error handling
	// app.use(function (err, req, res, next) {
	//   if (err.name === 'UnauthorizedError') {
	//     res.status(401).send('invalid token...');
	//   }
	//   next(err);
	// });

	app.get('/_auth_/callback', function(req, res, next) {

	  passport.authenticate('auth0', function(err, user, info) {
	    if (err) return next(err);
	    if (!user) {
	    	return res.redirect('/login');
	    }
	    else {
	    	//console.log('user back from auth', user)
		    req.logIn(user, function(err) {
		    	//console.log('user back from auth 2', user)
		    //   if (err) { return next(err); }
		      // return res.redirect('/users/' + user.username);
		    });
		    //console.log('info: ', info.id_token);
		    //AJAX call for user; https://qa.topcoder.com/v2/user/tcid/
	      return res.redirect('/#/_auth_/login?jwt=' + info.id_token + '&state=' + req.query.state);
	    }
	  })(req, res, next);
	});

	app.get('/_auth_/handleAuthError', function(req, res) {
		console.log('There was an error in authorizing the user');
	})

	return jwtCheck;
}
